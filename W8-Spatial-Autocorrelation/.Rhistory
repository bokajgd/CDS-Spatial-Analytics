scale_color_discrete(name = "Alive", labels = c("No", "Yes")) # Customizing legend for alive/not alive
# Plotting total wins against  wins per year
ggplot(pga_tour_wins, aes(Wins, Wins/Span, label = Name, size = Majors, color = Still_alive)) +
geom_point() +
geom_label(position = position_dodge(width = 2)) +
theme_classic() + # Setting prettier  theme
labs(x = "PGA Tour Wins", # Defining all labels
y = "Wins per year")+
scale_color_manual(values = c("#d8b365", "#f5f5f5"))+
scale_color_discrete(name = "Alive", labels = c("No", "Yes")) # Customizing legend for alive/not alive
# Plotting total wins against  wins per year
ggplot(pga_tour_wins, aes(Wins, Wins/Span, label = Name, size = Majors, color = Still_alive)) +
geom_point() +
geom_label() +
theme_classic() + # Setting prettier  theme
labs(x = "PGA Tour Wins", # Defining all labels
y = "Wins per year")+
scale_color_manual(values = c("#d8b365", "#f5f5f5"))+
scale_color_discrete(name = "Alive", labels = c("No", "Yes")) # Customizing legend for alive/not alive
# Plotting total wins against  wins per year
ggplot(pga_tour_wins, aes(Wins, Wins/Span, label = Name, size = Majors, color = Still_alive)) +
geom_point() +
geom_label() +
theme_classic() + # Setting prettier  theme
labs(x = "PGA Tour Wins", # Defining all labels
y = "Wins per year")+
scale_color_discrete(name = "Alive", labels = c("No", "Yes"), values = c("#d8b365", "#f5f5f5")) # Customizing legend for alive/not alive
# Plotting total wins against  wins per year
ggplot(pga_tour_wins, aes(Wins, Wins/Span, label = Name, size = Majors, color = Still_alive)) +
geom_point() +
geom_label() +
theme_classic() + # Setting prettier  theme
labs(x = "PGA Tour Wins", # Defining all labels
y = "Wins per year")+
scale_color_manual(name = "Alive", labels = c("No", "Yes"), values = c("#d8b365", "#f5f5f5")) # Customizing legend for alive/not alive
# Plotting total wins against  wins per year
ggplot(pga_tour_wins, aes(Wins, Wins/Span, label = Name, size = Majors, color = Still_alive)) +
geom_point() +
geom_label() +
theme_classic() + # Setting prettier  theme
labs(x = "PGA Tour Wins", # Defining all labels
y = "Wins per year")+
scale_color_manual(name = "Alive", labels = c("No", "Yes"), values = c("black", "#f5f5f5")) # Customizing legend for alive/not alive
# Plotting total wins against  wins per year
ggplot(pga_tour_wins, aes(Wins, Wins/Span, label = Name, size = Majors, color = Still_alive)) +
geom_point() +
geom_label() +
theme_classic() + # Setting prettier  theme
labs(x = "PGA Tour Wins", # Defining all labels
y = "Wins per year")+
scale_color_manual(name = "Alive", labels = c("No", "Yes"), values = c("#d8b365", "#black")) # Customizing legend for alive/not alive
# Plotting total wins against  wins per year
ggplot(pga_tour_wins, aes(Wins, Wins/Span, label = Name, size = Majors, color = Still_alive)) +
geom_point() +
geom_label() +
theme_classic() + # Setting prettier  theme
labs(x = "PGA Tour Wins", # Defining all labels
y = "Wins per year")+
scale_color_manual(name = "Alive", labels = c("No", "Yes"), values = c("#d8b365", "black")) # Customizing legend for alive/not alive
# Plotting total wins against  wins per year
ggplot(pga_tour_wins, aes(Wins, Wins/Span, label = Name, size = Majors, color = Still_alive)) +
geom_point() +
geom_label() +
theme_classic() + # Setting prettier  theme
labs(x = "PGA Tour Wins", # Defining all labels
y = "Wins per year")+
scale_color_manual(name = "Alive", labels = c("No", "Yes"), values = c("black","#d8b365")) # Customizing legend for alive/not alive
# Plotting total wins against  wins per year
ggplot(pga_tour_wins, aes(Wins, Wins/Span, label = Name, size = Majors, color = Still_alive)) +
geom_point() +
geom_text() +
theme_classic() + # Setting prettier  theme
labs(x = "PGA Tour Wins", # Defining all labels
y = "Wins per year")+
scale_color_manual(name = "Alive", labels = c("No", "Yes"), values = c("black","#d8b365")) # Customizing legend for alive/not alive
# Plotting total wins against  wins per year
ggplot(pga_tour_wins, aes(Wins, Wins/Span, label = Name, size = Majors, color = Still_alive)) +
geom_point() +
geom_text(position = position_dodge2()) +
theme_classic() + # Setting prettier  theme
labs(x = "PGA Tour Wins", # Defining all labels
y = "Wins per year")+
scale_color_manual(name = "Alive", labels = c("No", "Yes"), values = c("black","#d8b365")) # Customizing legend for alive/not alive
# Plotting total wins against  wins per year
ggplot(pga_tour_wins, aes(Wins, Wins/Span, label = Name, size = Majors, color = Still_alive)) +
geom_point() +
geom_text(position = position_dodge()) +
theme_classic() + # Setting prettier  theme
labs(x = "PGA Tour Wins", # Defining all labels
y = "Wins per year")+
scale_color_manual(name = "Alive", labels = c("No", "Yes"), values = c("black","#d8b365")) # Customizing legend for alive/not alive
# Plotting total wins against  wins per year
ggplot(pga_tour_wins, aes(Wins, Wins/Span, label = Name, size = Majors, color = Still_alive)) +
geom_point() +
geom_text(position = position_jitter()) +
theme_classic() + # Setting prettier  theme
labs(x = "PGA Tour Wins", # Defining all labels
y = "Wins per year")+
scale_color_manual(name = "Alive", labels = c("No", "Yes"), values = c("black","#d8b365")) # Customizing legend for alive/not alive
# Plotting total wins against  wins per year
ggplot(pga_tour_wins, aes(Wins, Wins/Span, label = Name, size = Majors, color = Still_alive)) +
geom_point() +
geom_label()) +
theme_classic() + # Setting prettier  theme
labs(x = "PGA Tour Wins", # Defining all labels
y = "Wins per year")+
scale_color_manual(name = "Alive", labels = c("No", "Yes"), values = c("black","#d8b365")) # Customizing legend for alive/not alive
# Plotting total wins against  wins per year
ggplot(pga_tour_wins, aes(Wins, Wins/Span, label = Name, size = Majors, color = Still_alive)) +
geom_point() +
geom_label() +
theme_classic() + # Setting prettier  theme
labs(x = "PGA Tour Wins", # Defining all labels
y = "Wins per year")+
scale_color_manual(name = "Alive", labels = c("No", "Yes"), values = c("black","#d8b365")) # Customizing legend for alive/not alive
# Plotting total wins against  wins per year
ggplot(pga_tour_wins, aes(Wins, Wins/Span, label = Name, size = Majors, color = Still_alive)) +
geom_point() +
geom_label_repel(aes(label=label),
label.size = NA,
alpha = 0.6,
label.padding=.1,
na.rm=TRUE) +
theme_classic() + # Setting prettier  theme
labs(x = "PGA Tour Wins", # Defining all labels
y = "Wins per year")+
scale_color_manual(name = "Alive", labels = c("No", "Yes"), values = c("black","#d8b365")) # Customizing legend for alive/not alive
p_load(rvest, dplyr, tidyr, stringr, janitor, tidyverse ggrepel)
p_load(rvest, dplyr, tidyr, stringr, janitor, tidyverse, ggrepel)
# Plotting total wins against  wins per year
ggplot(pga_tour_wins, aes(Wins, Wins/Span, label = Name, size = Majors, color = Still_alive)) +
geom_point() +
geom_label_repel(aes(label=label),
label.size = NA,
alpha = 0.6,
label.padding=.1,
na.rm=TRUE) +
theme_classic() + # Setting prettier  theme
labs(x = "PGA Tour Wins", # Defining all labels
y = "Wins per year")+
scale_color_manual(name = "Alive", labels = c("No", "Yes"), values = c("black","#d8b365")) # Customizing legend for alive/not alive
# Plotting total wins against  wins per year
ggplot(pga_tour_wins, aes(Wins, Wins/Span, label = Name, size = Majors, color = Still_alive)) +
geom_point() +
geom_label_repel(aes(label=Name),
label.size = NA,
alpha = 0.6,
label.padding=.1,
na.rm=TRUE) +
theme_classic() + # Setting prettier  theme
labs(x = "PGA Tour Wins", # Defining all labels
y = "Wins per year")+
scale_color_manual(name = "Alive", labels = c("No", "Yes"), values = c("black","#d8b365")) # Customizing legend for alive/not alive
# Plotting total wins against  wins per year
ggplot(pga_tour_wins, aes(Wins, Wins/Span, label = Name, size = Majors, color = Still_alive)) +
geom_point() +
geom_label_repel(aes(label=Name),
label.size = NA,
alpha = 0.6,
label.padding=.05,
na.rm=TRUE) +
theme_classic() + # Setting prettier  theme
labs(x = "PGA Tour Wins", # Defining all labels
y = "Wins per year")+
scale_color_manual(name = "Alive", labels = c("No", "Yes"), values = c("black","#d8b365")) # Customizing legend for alive/not alive
View(pga_tour_wins)
# Plotting total wins against  wins per year
ggplot(pga_tour_wins, aes(Wins, Wins/Span, label = Name, size = Majors, color = Still_alive)) +
geom_point() +
geom_label_repel(aes(label=Name),
label.size = NA,
alpha = 0.6,
label.padding=.5,
na.rm=TRUE) +
theme_classic() + # Setting prettier  theme
labs(x = "PGA Tour Wins", # Defining all labels
y = "Wins per year")+
scale_color_manual(name = "Alive", labels = c("No", "Yes"), values = c("black","#d8b365")) # Customizing legend for alive/not alive
# Plotting total wins against  wins per year
ggplot(pga_tour_wins, aes(Wins, Wins/Span, label = Name, size = Majors, color = Still_alive)) +
geom_point() +
geom_label_repel(aes(label=Name),
label.size = NA,
alpha = 0.6,
label.padding=.1,
na.rm=TRUE) +
theme_classic() + # Setting prettier  theme
labs(x = "PGA Tour Wins", # Defining all labels
y = "Wins per year")+
scale_color_manual(name = "Alive", labels = c("No", "Yes"), values = c("black","#d8b365")) # Customizing legend for alive/not alive
# Plotting total wins against  wins per year
ggplot(pga_tour_wins, aes(Wins, Wins/Span, label = Name, size = Majors, color = Still_alive)) +
geom_point() +
geom_label_repel(aes(label=Name),
label.size = NA,
alpha = 0.2,
label.padding=.1,
na.rm=TRUE) +
theme_classic() + # Setting prettier  theme
labs(x = "PGA Tour Wins", # Defining all labels
y = "Wins per year")+
scale_color_manual(name = "Alive", labels = c("No", "Yes"), values = c("black","#d8b365")) # Customizing legend for alive/not alive
# Plotting total wins against  wins per year
ggplot(pga_tour_wins, aes(Wins, Wins/Span, label = Name, size = Majors, color = Still_alive)) +
geom_point() +
geom_label_repel(aes(label=Name),
label.size = NA,
alpha = 0.7,
label.padding=.1,
na.rm=TRUE) +
theme_classic() + # Setting prettier  theme
labs(x = "PGA Tour Wins", # Defining all labels
y = "Wins per year")+
scale_color_manual(name = "Alive", labels = c("No", "Yes"), values = c("black","#d8b365")) # Customizing legend for alive/not alive
# Plotting total wins against  wins per year
ggplot(pga_tour_wins, aes(Wins, Wins/Span, label = Name, size = Majors, color = Still_alive)) +
geom_point() +
geom_label_repel(aes(label=Name),
label.size = 0.3,
alpha = 0.6,
label.padding=.1,
na.rm=TRUE) +
theme_classic() + # Setting prettier  theme
labs(x = "PGA Tour Wins", # Defining all labels
y = "Wins per year")+
scale_color_manual(name = "Alive", labels = c("No", "Yes"), values = c("black","#d8b365")) # Customizing legend for alive/not alive
# Plotting total wins against  wins per year
ggplot(pga_tour_wins, aes(Wins, Wins/Span, label = Name, size = Majors, color = Still_alive)) +
geom_point() +
geom_label_repel(aes(label=Name),
label.size = NA,
alpha = 0.6,
label.padding=.1,
na.rm=TRUE) +
theme_classic() + # Setting prettier  theme
labs(x = "PGA Tour Wins", # Defining all labels
y = "Wins per year")+
scale_color_manual(name = "Alive", labels = c("No", "Yes"), values = c("black","#d8b365")) # Customizing legend for alive/not alive
# Plotting total wins against  wins per year
ggplot(pga_tour_wins, aes(Wins, Wins/Span, label = Name, size = Majors, color = Still_alive)) +
geom_point() +
geom_label_repel(aes(label=Name),
label.size = NA,
alpha = 0.6,
label.padding=.1) +
theme_classic() + # Setting prettier  theme
labs(x = "PGA Tour Wins", # Defining all labels
y = "Wins per year")+
scale_color_manual(name = "Alive", labels = c("No", "Yes"), values = c("black","#d8b365")) # Customizing legend for alive/not alive
pga_tour_wins$Name <- gsub('.{2}$', '', pga_tour_wins$Name)
View(pga_tour_wins)
View(pga_tour_wins)
# Extracting the desired data table
whole_table <- url_html %>%
html_node(xpath = '//*[@id="mw-content-text"]/div[1]/table') %>%
html_table(fill = TRUE)  #str(whole_table) turns out to be a list
# Inspecting the data
whole_table %>% head()
# Turning data into a tibble
pga_tour_wins <- as_tibble(whole_table)
pga_tour_wins <- pga_tour_wins[0:25,]
# Renaming column names
pga_tour_wins <-
rename(pga_tour_wins, 'Name'= 'Name[a]',
'Birth_death' = 'Year of birthand death',
'Majors' = 'Majors[b]',
'Span' = 'Span(years)')
# Add column indicating if players is still alive
pga_tour_wins$Still_alive <- grepl('–$', pga_tour_wins$Birth_death)
View(pga_tour_wins)
# Removing unnecessary 'H' from all names
pga_tour_wins$Name <- gsub('.{2}$', '', pga_tour_wins$Name)
View(pga_tour_wins)
View(pga_tour_wins)
# Plotting total wins against  wins per year
ggplot(pga_tour_wins, aes(Wins, Wins/Span, label = Name, size = Majors, color = Still_alive)) +
geom_point() +
geom_label_repel(aes(label=Name), # Adding labels to points
label.size = NA,
alpha = 0.6,
label.padding=.1,
na.rm=TRUE) +
theme_classic() + # Setting prettier  theme
labs(x = "PGA Tour Wins", # Defining all labels
y = "Wins per year")+
scale_color_manual(name = "Alive", labels = c("No", "Yes"), values = c("black","#d8b365")) # Customizing legend for alive/not alive
# Extracting the desired data table
whole_table <- url_html %>%
html_node(xpath = '//*[@id="mw-content-text"]/div[1]/table') %>%
html_table(fill = TRUE)  # Turns out to be a list
# Inspecting the data
whole_table %>% head()
View(pga_tour_wins)
# Plotting total wins against  wins per year
ggplot(pga_tour_wins, aes(Wins, Wins/Span, label = Name, size = Majors, color = Still_alive)) +
geom_point() +
geom_label_repel(aes(label=Name), # Adding labels to points
label.size = NA,
alpha = 0.6,
label.padding=.1,
na.rm=TRUE) +
theme_classic() + # Setting prettier  theme
labs(x = "PGA Tour Wins", # Defining all labels
y = "Wins per year",
title ="PGA Tour wins agianst yearly win rate")+
scale_color_manual(name = "Alive", labels = c("No", "Yes"), values = c("black","#d8b365")) # Customizing legend for alive/not alive
View(pga_tour_wins)
notes <- read.csv()
library(pacman)
p_load(tidyverse, dlpyr)
View(url_html)
View(url_html)
notes <- read_csv("~/Desktop/Cognitive_Science/Cognitive Science 5th semester/Bachelor's project/mimic-iii-clinical-database-1.4/notes_testfile.csv")
View(notes)
library(knitr)
install.packages('rmdformats')
library(rmdformats)
## Global options
options(max.print="75")
opts_chunk$set(echo=FALSE,
cache=TRUE,
prompt=FALSE,
tidy=TRUE,
comment=NA,
message=FALSE,
warning=FALSE)
opts_knit$set(width=75)
# Load the sf package
library(sf)
# ... and the dplyr package
library(dplyr)
library(lwgeom)
# Load tidyverse
library(tidyverse)
library(raster)
library(rgdal)
library(raster)
library(knitr)
library(rmdformats)
## Global options
options(max.print="75")
opts_chunk$set(echo=TRUE,
cache=TRUE,
prompt=FALSE,
tidy=TRUE,
comment=NA,
message=FALSE,
warning=FALSE)
opts_knit$set(width=75)
# Library
library(raster)
# Read in the canopy layer
canopy <- raster("data/canopy.tif")
# Plot the canopy raster
plot(canopy)
# Determine the raster resolution
res(canopy)
# Determine the number of cells
ncell(canopy)
# Aggregate the raster
canopy_small <- aggregate(canopy, fact = 10)
# Plot the new canopy layer
plot(canopy_small)
# Determine the new raster resolution
res(canopy_small)
# Determine the number of cells in the new raster
ncell(canopy_small)
# Set up the matrix
vals <- cbind(100, 300, NA)
```{r reclass, eval=FALSE}
# Plot the canopy layer to see the values above 100
plot(canopy)
# Set up the matrix
vals <- cbind(100, 300, NA)
# Reclassify
canopy_reclass <- reclassify(canopy, rcl = vals )
# Plot again and confirm that the legend stops at 100
___(canopy_reclass)
# Plot again and confirm that the legend stops at 100
pllot(canopy_reclass)
# Plot again and confirm that the legend stops at 100
plot(canopy_reclass)
### 1. Start by installing the required packages first.
# these are not on worker2, sorry!
install.packages(c("rasterVis",
"RColorBrewer",
"landsat",
"lattice",
"latticeExtra",
"rgl",
"itcSegment"))
install.packages(c("rasterVis", "RColorBrewer", "landsat", "lattice", "latticeExtra", "rgl", "itcSegment"))
install.packages(c("rasterVis", "RColorBrewer", "landsat", "lattice", "latticeExtra", "rgl", "itcSegment"))
install.packages(c("rasterVis", "RColorBrewer", "landsat", "lattice", "latticeExtra", "rgl", "itcSegment"))
install.packages(c("rasterVis", "RColorBrewer", "landsat", "lattice", "latticeExtra", "rgl", "itcSegment"))
install.packages(c("rasterVis", "RColorBrewer", "landsat", "lattice", "latticeExtra", "rgl", "itcSegment"))
install.packages(c("rasterVis", "RColorBrewer", "landsat", "lattice", "latticeExtra", "rgl", "itcSegment"))
install.packages(c("rasterVis", "RColorBrewer", "landsat", "lattice", "latticeExtra", "rgl", "itcSegment"))
### 1. Start by installing the required packages first.
# these are not on worker2, sorry!
pacman::p_load(rasterVis,
RColorBrewer,
landsat,
lattice,
latticeExtra,
rgl,
itcSegment))
### 1. Start by installing the required packages first.
# these are not on worker2, sorry!
library(pacman)
pacman::p_load(rasterVis,
RColorBrewer,
landsat,
lattice,
latticeExtra,
rgl,
itcSegment))
pacman::p_load(rasterVis,
RColorBrewer,
landsat,
lattice,
latticeExtra,
rgl,
itcSegment)
install.packages("rgl")
### 2. Pre-processing Landsat datasets
library(landsat)
##loading indvidual band image data from landsat package
?nov
#loading band#3 red channel of the image
data(nov3)
plot(nov3)
data(nov4)
plot(nov4)
library(lattice)
library(latticeExtra)
library(RColorBrewer)
library(rasterVis)
library(rgdal)
library(rgl)
library(rgl)
install.packages("rlang")
install.packages("rlg")
# load and plot the dem in landsat package
data(dem)
plot(dem)
dem <- raster(dem)
# this neat 3D viewer opens in a new window
plot3D(dem, rev=T, zfac=1)
install.packages("rlg")
install.packages("rgl")
library(rgl)
,
# this neat 3D viewer opens in a new window
plot3D(dem, rev=T, zfac=1)
pacman::p_load(rasterVis, RColorBrewer, landsat, lattice, latticeExtra, itcSegment, rgl)
remove.packages(rgl)
remove.packages("rgl")
library(knitr)
library(rmdformats)
## Global options
options(max.print="75")
opts_chunk$set(echo=TRUE,
cache=TRUE,
prompt=FALSE,
tidy=TRUE,
comment=NA,
message=FALSE,
warning=FALSE)
opts_knit$set(width=75)
# Loading libraries
library(raster)
library(rgeos)
library(sf)
library(tidyverse)
library(htmltools)
library(googlesheets4)
library(mapview)
# Loading libraries
install.packages("mapview")
setwd("~/Desktop/Cognitive_Science/Cognitive Science 6th semester/Spatial Analytics/CDS-Spatial-Analytics/W8-Spatial-Autocorrelation")
# Load data fir the Danish municipalities
mun_sp <- readRDS("data/gadm36_DNK_2_sp.rds")
# Transform to an sf object
mun_sf <- st_as_sf(mun_sp)
# Convert CRS
mun <- st_transform(mun_sf, crs = 32632)
# view what the data looks like
mapview(mun)
# Load data fir the Danish municipalities
mun_sp <- readRDS("data/gadm36_DNK_2_sp.rds")
# Transform to an sf object
mun_sf <- st_as_sf(mun_sp)
# Convert CRS
mun <- st_transform(mun_sf, crs = 32632)
# view what the data looks like
mapview(mun)
```{r}
# Loading libraries
install.packages("mapview")
# Loading libraries
library(raster)
library(rgeos)
library(sf)
library(tidyverse)
library(htmltools)
library(googlesheets4)
library(mapview)
# view what the data looks like
mapview(mun)
# Loading data on single citizens
civilstatus_DK <- read_sheet("https://docs.google.com/spreadsheets/d/1xcrd07gV3Sm0fuzSIWu2Op36oDBmvvrlHU9uNz49kuU/edit#gid=0")
